name: Deploy to VPS

on:
  workflow_run:
    workflows: ["Docker Build and Push"]
    types: [completed]
    branches: [develop, demo, intranet]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'develop'

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Get branch name
        id: branch
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            BRANCH="${{ github.event.workflow_run.head_branch }}"
            echo "Triggered by workflow_run from branch: $BRANCH"
            echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          else
            BRANCH="${{ github.event.inputs.branch }}"
            echo "Triggered by workflow_dispatch for branch: $BRANCH"
          fi
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.branch.outputs.branch }}

      - name: Generate JWT keys and secrets
        run: |
          cd api
          chmod +x credential-generator.sh
          ./credential-generator.sh

          # Extrair as variáveis do .env gerado
          JWT_PRIVATE_KEY=$(grep "^JWT_PRIVATE_KEY=" .env | cut -d'=' -f2)
          JWT_PUBLIC_KEY=$(grep "^JWT_PUBLIC_KEY=" .env | cut -d'=' -f2)
          COOKIE_SECRET=$(grep "^COOKIE_SECRET=" .env | cut -d'=' -f2)

          # Salvar nas variáveis de ambiente do job
          echo "JWT_PRIVATE_KEY=$JWT_PRIVATE_KEY" >> $GITHUB_ENV
          echo "JWT_PUBLIC_KEY=$JWT_PUBLIC_KEY" >> $GITHUB_ENV
          echo "COOKIE_SECRET=$COOKIE_SECRET" >> $GITHUB_ENV

      - name: Generate docker-compose file
        run: |
          echo "Branch: ${{ steps.branch.outputs.branch }}"
          echo "Mongo Port: $MONGO_PORT"
          echo "API Port: $API_PORT"
          ls -la templates/
          envsubst < templates/docker-compose-template.yml > docker-compose-generated.yml
          echo "Generated docker-compose file:"
          cat docker-compose-generated.yml
        env:
          BRANCH: ${{ steps.branch.outputs.branch }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          MONGO_PORT: ${{ steps.branch.outputs.branch == 'develop' && '27018' || steps.branch.outputs.branch == 'demo' && '27017' || '27019' }}
          API_PORT: ${{ steps.branch.outputs.branch == 'develop' && '3001' || steps.branch.outputs.branch == 'demo' && '3000' || '3002' }}
          EMAIL_PROVIDER_PASSWORD: ${{ secrets.EMAIL_PROVIDER_PASSWORD }}
          EMAIL_PROVIDER_USER: ${{ secrets.EMAIL_PROVIDER_USER }}
          EMAIL_PROVIDER_HOST: ${{ secrets.EMAIL_PROVIDER_HOST }}
          EMAIL_PROVIDER_PORT: ${{ secrets.EMAIL_PROVIDER_PORT }}

      - name: Upload docker-compose to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose-generated.yml"
          target: "/home/${{ secrets.VPS_USER }}/deployments/${{ steps.branch.outputs.branch }}/"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /home/${{ secrets.VPS_USER }}/deployments/${{ steps.branch.outputs.branch }}
            mv docker-compose-generated.yml docker-compose.yml
            docker compose pull
            docker compose up -d --build