name: Build, Docker and Deploy

on:
  push:
    branches: [develop, demo, intranet]

jobs:
  deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get branch name
        id: branch
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # Build API
      - name: Install API dependencies
        run: |
          cd api
          npm install

      - name: Build API
        run: |
          cd api
          npm run build

      # Build APP
      - name: Install APP dependencies
        run: |
          cd app
          npm install

      - name: Build APP
        run: |
          cd app
          npm run build

      # Docker Setup
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and Push API Docker Image
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/lowcodejs-api:${{ steps.branch.outputs.branch }}
          build-args: |
            APP_SERVER_URL=https://api.${{ steps.branch.outputs.branch }}.lowcodejs.org
            APP_CLIENT_URL=https://${{ steps.branch.outputs.branch }}.lowcodejs.org

      # Build and Push APP Docker Image
      - name: Build and push APP image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/lowcodejs-app:${{ steps.branch.outputs.branch }}
          build-args: |
            VITE_API_BASE_URL=https://api.${{ steps.branch.outputs.branch }}.lowcodejs.org

      # Generate JWT keys and secrets
      - name: Generate JWT keys and secrets
        run: |
          cd api
          chmod +x credential-generator.sh
          ./credential-generator.sh

          # Extrair as variáveis do .env gerado
          JWT_PRIVATE_KEY=$(grep "^JWT_PRIVATE_KEY=" .env | cut -d'=' -f2)
          JWT_PUBLIC_KEY=$(grep "^JWT_PUBLIC_KEY=" .env | cut -d'=' -f2)
          COOKIE_SECRET=$(grep "^COOKIE_SECRET=" .env | cut -d'=' -f2)

          # Salvar nas variáveis de ambiente do job
          echo "JWT_PRIVATE_KEY=$JWT_PRIVATE_KEY" >> $GITHUB_ENV
          echo "JWT_PUBLIC_KEY=$JWT_PUBLIC_KEY" >> $GITHUB_ENV
          echo "COOKIE_SECRET=$COOKIE_SECRET" >> $GITHUB_ENV

      # Generate docker-compose file
      - name: Generate docker-compose file
        run: |
          echo "Branch: ${{ steps.branch.outputs.branch }}"
          echo "Mongo Port: $MONGO_PORT"
          echo "API Port: $API_PORT"
          envsubst < templates/docker-compose-template.yml > docker-compose-generated.yml
          echo "Generated docker-compose file:"
          cat docker-compose-generated.yml
        env:
          BRANCH: ${{ steps.branch.outputs.branch }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          MONGO_PORT: ${{ steps.branch.outputs.branch == 'develop' && '27018' || steps.branch.outputs.branch == 'demo' && '27017' || '27019' }}
          API_PORT: ${{ steps.branch.outputs.branch == 'develop' && '3001' || steps.branch.outputs.branch == 'demo' && '3000' || '3002' }}
          EMAIL_PROVIDER_PASSWORD: ${{ secrets.EMAIL_PROVIDER_PASSWORD }}
          EMAIL_PROVIDER_USER: ${{ secrets.EMAIL_PROVIDER_USER }}
          EMAIL_PROVIDER_HOST: ${{ secrets.EMAIL_PROVIDER_HOST }}
          EMAIL_PROVIDER_PORT: ${{ secrets.EMAIL_PROVIDER_PORT }}

      # Deploy to VPS
      - name: Upload docker-compose to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose-generated.yml"
          target: "/home/${{ secrets.VPS_USER }}/deployments/${{ steps.branch.outputs.branch }}/"

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /home/${{ secrets.VPS_USER }}/deployments/${{ steps.branch.outputs.branch }}
            mv docker-compose-generated.yml docker-compose.yml
            docker compose pull
            docker compose up -d --build